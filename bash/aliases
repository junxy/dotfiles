# OS specific support.  $var _must_ be set to either true or false.
linux=false
darwin=false
case "`uname`" in
  Linux*) linux=true;;
  Darwin*) darwin=true;;
esac

#-----------
# Searching:
#-----------
# ff:  to find a file under the current directory
function ff () { /usr/bin/find . -name "$@" ; }
# ffs: to find a file whose name starts with a given string
function ffs () { /usr/bin/find . -name "$@"'*' ; }
# ffe: to find a file whose name ends with a given string
function ffe () { /usr/bin/find . -name '*'"$@" ; }

# grepfind: to grep through files found by find, e.g. grepf pattern '*.c'
# note that 'grep -r pattern dir_name' is an alternative if want all files 
function grepfind () { find . -type f -name "$2" -print0 | xargs -0 grep "$1" ; }
# I often can't recall what I named this alias, so make it work either way: 
alias findgrep='grepfind'

#---------------
# Text handling:
#---------------
# enquote: surround lines with quotes (useful in pipes) - from mervTormel
function enquote () { /usr/bin/sed 's/^/"/;s/$/"/' ; }

# numberLines: echo the lines of a file preceded by line number
function numberLines () { perl -pe 's/^/$. /' "$@" ; }


# Others 
alias .p='source ~/.bash_profile'
alias ?='h | g '
alias g='grep -n'
alias h='history'
alias ls='ls -G'
alias ll='ls -lF'
alias ps?='ps aux | grep '
alias pi='ping www.google.com'
alias ..='cd ..'
alias ...='cd ../..'
alias idea="$IDEA_HOME/bin/idea.sh >> /tmp/idea.log 2>&1 &"
alias sqldev="sqldeveloper.sh >> /dev/null 2>&1 &"
alias viewarchive='file-roller'

function c { cd ~/w/$1; }

alias cdw="cd ~/w"

# OS specific
if $darwin; then
  alias gitxa='gitx --all&'
  alias bkp_2motomoto='time rsync --copy-links -C --delete -rt ~/.bkp_links/ /Volumes/Volume_1/bkp-imac/'
  alias bkp_2muse='time rsync --copy-links -C --delete -rt ~/.bkp_links/ /Volumes/muse/bkp-imac'
elif $linux; then 
  alias pbcopy='xsel --clipboard --input'
  alias pbpaste='xsel --clipboard --output'
  alias gitka='gitk --all&'
fi

alias pbc='pbcopy'
alias pbp='pbpaste'
alias pwdc='pwd|pbc'

# groal-like notification when a command is done
function sd {
  ($@)
  if [ $? = 0 ]
  then
     notify-send ":) done: $*"
  else
     notify-send ":( failed: $*"
  fi
}
# Switch to a gem directory, trying to match your name the best
function cdgem {
  gem_dir=`gem env | grep INSTALLATION | cut -d' ' -f6`
  cd $gem_dir/gems
  cd `ls|grep $1|sort|tail -1`
}
 
function sagi {
  sudo apt-get -y install $1 
}
# Display a random hint
function hint {
  fn=~/.dotfiles/lib/hints.txt
  sed -n $(awk "END{ print $RANDOM%NR+1}" $fn)p $fn
}
